// <auto-generated />
using System;
using Course_platform;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Course_platform.Migrations
{
    [DbContext(typeof(NovaMindContext))]
    partial class NovaMindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseCategoryMap", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("CourseId", "CategoryId")
                        .HasName("course_category_map_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("course_category_map", (string)null);
                });

            modelBuilder.Entity("Course_platform.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("CourseId")
                        .HasName("courses_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Course_platform.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool?>("IsComplited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_complited");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("LessonId")
                        .HasName("lessons_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("Course_platform.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id")
                        .HasDefaultValueSql("nextval('message_message_id_seq'::regclass)");

                    b.Property<int?>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("read");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId")
                        .HasName("message_pkey");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Course_platform.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .HasDefaultValueSql("nextval('category_category_id_seq'::regclass)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Course_platform.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chat_id")
                        .HasDefaultValueSql("nextval('chat_chat_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("User1Id")
                        .HasColumnType("integer")
                        .HasColumnName("user1_id");

                    b.Property<int?>("User2Id")
                        .HasColumnType("integer")
                        .HasColumnName("user2_id");

                    b.HasKey("ChatId")
                        .HasName("chat_pkey");

                    b.HasIndex("User2Id");

                    b.HasIndex(new[] { "User1Id", "User2Id" }, "chat_user1_id_user2_id_key")
                        .IsUnique();

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Course_platform.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<bool?>("IsComplited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_complited");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("ModuleId")
                        .HasName("modules_pkey");

                    b.HasIndex("CourseId");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Course_platform.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rating_id")
                        .HasDefaultValueSql("nextval('rating_rating_id_seq'::regclass)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Rating1")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("RatingId")
                        .HasName("rating_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("Course_platform.Models.UserCourseProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("progress_id")
                        .HasDefaultValueSql("nextval('usercourseprogress_progress_id_seq'::regclass)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state")
                        .HasDefaultValueSql("'not started'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ProgressId")
                        .HasName("usercourseprogress_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex(new[] { "UserId", "CourseId" }, "usercourseprogress_user_id_course_id_key")
                        .IsUnique();

                    b.ToTable("user_course_progress", (string)null);
                });

            modelBuilder.Entity("Course_platform.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("PlatformFee")
                        .HasColumnType("integer")
                        .HasColumnName("platform_fee");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("transaction_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("transactions_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Course_platform.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccountBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("account_balance");

                    b.Property<string>("AvatarThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_thumbnail_url");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateOnly?>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nickname");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("VerifiedDegree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified_degree");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Follower", b =>
                {
                    b.Property<int>("FollowingUserId")
                        .HasColumnType("integer")
                        .HasColumnName("following_user_id");

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("followed_user_id");

                    b.HasKey("FollowingUserId", "FollowedUserId")
                        .HasName("followers_pkey");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("CourseCategoryMap", b =>
                {
                    b.HasOne("Course_platform.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("course_category_map_category_id_fkey");

                    b.HasOne("Course_platform.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("course_category_map_course_id_fkey");
                });

            modelBuilder.Entity("Course_platform.Course", b =>
                {
                    b.HasOne("Course_platform.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("courses_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_platform.Lesson", b =>
                {
                    b.HasOne("Course_platform.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lessons_module_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_platform.Message", b =>
                {
                    b.HasOne("Course_platform.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("message_chat_id_fkey");

                    b.HasOne("Course_platform.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("message_user_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_platform.Models.Chat", b =>
                {
                    b.HasOne("Course_platform.User", "User1")
                        .WithMany("ChatUser1s")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("chat_user1_id_fkey");

                    b.HasOne("Course_platform.User", "User2")
                        .WithMany("ChatUser2s")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("chat_user2_id_fkey");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Course_platform.Models.Module", b =>
                {
                    b.HasOne("Course_platform.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("modules_course_id_fkey");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Course_platform.Models.Rating", b =>
                {
                    b.HasOne("Course_platform.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("rating_course_id_fkey");

                    b.HasOne("Course_platform.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("rating_user_id_fkey");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_platform.Models.UserCourseProgress", b =>
                {
                    b.HasOne("Course_platform.Course", "Course")
                        .WithMany("UserCourseProgresses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usercourseprogress_course_id_fkey");

                    b.HasOne("Course_platform.User", "User")
                        .WithMany("UserCourseProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usercourseprogress_user_id_fkey");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_platform.Transaction", b =>
                {
                    b.HasOne("Course_platform.Course", "Course")
                        .WithMany("Transactions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transactions_course_id_fkey");

                    b.HasOne("Course_platform.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transactions_user_id_fkey");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Follower", b =>
                {
                    b.HasOne("Course_platform.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("followers_followed_user_id_fkey");

                    b.HasOne("Course_platform.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("followers_following_user_id_fkey");
                });

            modelBuilder.Entity("Course_platform.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Ratings");

                    b.Navigation("Transactions");

                    b.Navigation("UserCourseProgresses");
                });

            modelBuilder.Entity("Course_platform.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Course_platform.Models.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Course_platform.User", b =>
                {
                    b.Navigation("ChatUser1s");

                    b.Navigation("ChatUser2s");

                    b.Navigation("Courses");

                    b.Navigation("Messages");

                    b.Navigation("Ratings");

                    b.Navigation("Transactions");

                    b.Navigation("UserCourseProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
